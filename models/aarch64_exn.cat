"Arm-A exceptions"

include "cos.cat"
include "arm-common.cat"

(* optional context-sync on entry/exit *)
variant FEAT_ExS EIS EOS

(* possibility of sync ext aborts on reads/writes *)
variant SEA_R SEA_W

(* might-be speculatively executed *)
let speculative =
    ctrl
  | addr; po
  | if "SEA_R" then [R]; po else empty
  | if "SEA_W" then [W]; po else empty

(* context-sync-events *)
let CSE =
  ISB
  | if "FEAT_ExS" & ~"EIS" then empty else TE
  | if "FEAT_ExS" & ~"EOS" then empty else ERET

(* observed by *)
let obs = rfe | fr | co

(* dependency-ordered-before *)
let dob =
    addr | data
  | speculative ; [W]
  | speculative ; [ISB]
  | (addr | data); rfi

(* atomic-ordered-before *)
let aob =
    rmw
  | [range(rmw)]; rfi; [A | Q]

(* barrier-ordered-before *)
let bob =
    [R] ; po ; [dmbld]
  | [W] ; po ; [dmbst]
  | [dmbst]; po; [W]
  | [dmbld]; po; [R|W]
  | [L]; po; [A]
  | [A | Q]; po; [R | W]
  | [R | W]; po; [L]
  | [dsb]; po

let ctxob =
    speculative; [MSR]
  | [CSE]; po
  | [MSR]; po; [CSE]
  | speculative; [CSE]

(* Ordered-before *)
let ob1 = obs | dob | aob | bob | ctxob
let ob = ob1^+

(* Internal visibility requirement *)
acyclic po-loc | fr | co | rf as internal

(* External visibility requirement *)
irreflexive ob as external

(* Atomic: Basic LDXR/STXR constraint to forbid intervening writes. *)
empty rmw & (fre; coe) as atomic
(*
enum AccessType = {
  AccessType_IFETCH,
  AccessType_GPR,
  AccessType_ASIMD,
  AccessType_SVE,
  AccessType_SME,
  AccessType_IC,
  AccessType_DC,
  AccessType_DCZero,
  AccessType_AT,
  AccessType_NV2,
  AccessType_SPE,
  AccessType_GCS,
  AccessType_GPTW,
  AccessType_TTW
}

enum Fault = {
  Fault_None,
  Fault_AccessFlag,
  Fault_Alignment,
  Fault_Background,
  Fault_Domain,
  Fault_Permission,
  Fault_Translation,
  Fault_AddressSize,
  Fault_SyncExternal,
  Fault_SyncExternalOnWalk,
  Fault_SyncParity,
  Fault_SyncParityOnWalk,
  Fault_GPCFOnWalk,
  Fault_GPCFOnOutput,
  Fault_AsyncParity,
  Fault_AsyncExternal,
  Fault_TagCheck,
  Fault_Debug,
  Fault_TLBConflict,
  Fault_BranchTarget,
  Fault_HWUpdateAccessFlag,
  Fault_Lockdown,
  Fault_Exclusive,
  Fault_ICacheMaint
}

struct AccessDescriptor = {
  acctype : AccessType,
  el : bits(2),
  ss : SecurityState,
  acqsc : bool,
  acqpc : bool,
  relsc : bool,
  limitedordered : bool,
  exclusive : bool,
  atomicop : bool,
  modop : MemAtomicOp,
  nontemporal : bool,
  read : bool,
  write : bool,
  cacheop : CacheOp,
  opscope : CacheOpScope,
  cachetype : CacheType,
  pan : bool,
  transactional : bool,
  nonfault : bool,
  firstfault : bool,
  first : bool,
  contiguous : bool,
  streamingsve : bool,
  ls64 : bool,
  mops : bool,
  rcw : bool,
  rcws : bool,
  toplevel : bool,
  varange : VARange,
  a32lsmd : bool,
  tagchecked : bool,
  tagaccess : bool,
  mpam : MPAMinfo
}

struct FaultRecord = {
  statuscode : Fault,
  access : AccessDescriptor,
  ipaddress : FullAddress,
  gpcf : GPCFRecord,
  paddress : FullAddress,
  gpcfs2walk : bool,
  s2fs1walk : bool,
  write : bool,
  s1tagnotdata : bool,
  tagaccess : bool,
  level : int,
  extflag : bits(1),
  secondstage : bool,
  assuredonly : bool,
  toplevel : bool,
  overlay : bool,
  dirtybit : bool,
  domain : bits(4),
  merrorstate : ErrorState,
  debugmoe : bits(4)
}
*)

accessor fault_type: Fault =
    .match {
        Some => .statuscode,
        _ => default
    }

accessor fault_acc_type: AccessType =
    .match {
        Some => .access.acctype,
        _ => default
    }

accessor fault_is_from_write: bool =
    .match {
        Some => .write,
        _ => false
    }

accessor fault_is_from_read: bool =
    .match {
        Some => .read,
        _ => false
    }

accessor is_fault: bool =
    .match {
        Some => true,
        _ => false
    }

accessor is_atomic: bool =
    .match {
        Some => .access.atomicop,
        _ => false
    }


(* A Fault is an exception with a FaultRecord *)
define Fault(ev: Event): bool =
    TE(ev) & is_fault(ev)

define IsTranslationFault(ev: Event): bool =
  Fault(ev) & (fault_type(ev) == Fault_Translation)

define IsPermissionFault(ev: Event): bool =
  Fault(ev) & (fault_type(ev) == Fault_Permission)

(* [Fault_T] is a translation fault and [Fault_P] is a permission fault *)
define Fault_T(ev: Event): bool = Fault(ev) & IsTranslationFault(ev)
define Fault_P(ev: Event): bool = Fault(ev) & IsPermissionFault(ev)

define fault_is_from_atomic(ev: Event): bool =
    Fault(ev) & is_atomic(ev)

define FaultFromR(ev: Event): bool =
    Fault(ev) & fault_is_from_read(ev)

define FaultFromW(ev: Event): bool =
    Fault(ev) & fault_is_from_write(ev)

define FaultFromAcquireR(ev: Event): bool =
    FaultFromR(ev) & fault_is_from_atomic(ev)

define FaultFromReleaseW(ev: Event): bool =
    FaultFromW(ev) & fault_is_from_atomic(ev)

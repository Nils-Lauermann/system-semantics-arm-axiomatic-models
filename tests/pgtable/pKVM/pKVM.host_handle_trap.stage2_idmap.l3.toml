arch = "AArch64"
name = "pKVM.host_handle_trap.stage2_idmap.l3"
symbolic = ["x"]

page_table_setup = """
option default_tables = false;
physical pa1;
intermediate ipa1;

s2table vm_stage2 0x260000 {
    ipa1 |-> invalid;
    ipa1 ?-> pa1;

    s1table host_s1 0x2C0000 {
        x |-> ipa1;
    }
}

s1table hyp_map 0x200000 {
    x |-> invalid;
    s1table host_s1;
    s2table vm_stage2;
    identity 0x1000 with code;
}

*pa1 = 1;
"""

[thread.0]
code = """
    LDR X0,[X1]
    LDR X2,[X3]
"""

[thread.0.reset]
R1 = "x"
R3 = "x"
R10 = "extz(0b0, 64)"
VBAR_EL2 = "extz(0x1000, 64)"

R11 = "mkdesc3(oa=pa1)"
R12 = "pte3(ipa1, vm_stage2)"

TTBR0_EL1 = "ttbr(asid=0x0000, base=host_s1)"
TTBR0_EL2 = "ttbr(asid=0x0000, base=hyp_map)"
VTTBR_EL2 = "ttbr(vmid=0x0000, base=vm_stage2)"

# start at EL1
"PSTATE.EL" = "0b01"

[section.thread0_el2_handler]
address = "0x1400"
code = """
// count number of exceptions
    ADD X10,X10,#1
// remember which IPA failed
    MRS X9,HPFAR_EL2
    lsl x9,x9,#8

// pkvm code
    STLR X11,[X12]
    DSB ISHST

1:
// return to next instruction
// pKVM doesn't really do this, it just tries the same instr again
// but without this the test can loop forever ...
    MRS X20,ELR_EL2
    ADD X20,X20,#4
    MSR ELR_EL2,X20

// return from handle_trap
    ERET
"""

[final]
assertion = "0:X10=2"

[graph]
force_show_events = [
    "T0:0:s1l3",
    "T0:0:s2l3",
    "T0:10:s1l3",
    "T0:10:s2l3",
]
shows = [
    "iio",
    "po",
    "rf",
    "trf",
]